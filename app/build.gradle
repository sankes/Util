apply plugin: 'com.android.application'

// 引用插件 将当前风味下的[srcDir]文件夹中文件拷贝到根目录下[desDir]文件夹中
apply plugin: 'configPlugin'
//configPlugin {
//    srcDir = 'config'
//    includePattern = '**/*.*'
//    excludePattern = '**/*.bak'
//    desDir = getRootDir().path + File.separator + 'config'
//}

// 简化引入包名，定义为config
def config = rootProject.ext.android
// 简化引入包名，定义为appConfig
def appConfig = rootProject.ext.appConfig
// 简化引入包名，定义为dependency
def dependency = rootProject.ext.dependencies

android {
    //在android 标签下,唯一的属性就是compileSdkVersion,buildToolsVersion
    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion
    defaultConfig {
        applicationId appConfig.applicationId
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode appConfig.versionCode
        versionName appConfig.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    flavorDimensions "mode"

    productFlavors {
        // 每一个flavor相当于defaultConfig，可以进行复写
        mock {
            dimension "mode"
        }
        prod {
            dimension "mode"
        }
//        minApi19 {
//            dimension "minApi"
//        }
//        minApi21 {
//            dimension "minApi"
//        }
    }
    // 应用签名配置
    signingConfigs {
        // debug版本的签名配置,通常不用配，因为有默认的debug签名
        debug {}
        release {
            File keyFile = new File(getRootDir().path + File.separator + "config" + File.separator + "shankes.jks")
            storeFile keyFile

            storePassword appConfig.keyStorePassword
            keyAlias appConfig.keyAlias
            keyPassword appConfig.keyPassword
        }
    }
    buildTypes {
        debug {
            // 这里是在 applicationId 中添加了一个后缀。所以『.』要加上
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                //设置支持的SO库架构
                abiFilters "armeabi", "armeabi-v7a", "x86"
            }
        }
        //这里的名字自定义，不要求大小写
        preview.initWith(buildTypes.release)
        release {
            // 这里是在 applicationId 中添加了一个后缀。所以『.』要加上
            // applicationIdSuffix ".release"
            signingConfig signingConfigs.release
            // 开启混淆
            minifyEnabled true
//            debuggable true
            // 是否启用zipAlign压缩
            zipAlignEnabled true
            // 自动移除不用资源
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ndk {
                // 设置支持的SO库架构
                abiFilters "armeabi", "armeabi-v7a", "x86"
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation dependency.appcompat_v7
    implementation dependency.constraint_layout
    testImplementation dependency.junit
    androidTestImplementation dependency.test_runner
    androidTestCompile(dependency.espresso_core, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}
